#!/usr/bin/env sh

# Description: Toggle mount status of a device using pmount
#              If the device is not mounted, it will be mounted.
#              If the device is mounted, it will be unmounted and powered down.
#
# Dependencies: lsblk, pmount (optional), udisks2
#
# Usage: Runs `lsblk` on 'l', exits on 'Return`.
#
# Notes:
#   - The script uses Linux-specific lsblk to list block devices. Alternatives:
#       macOS: "diskutil list"
#       BSD: "geom disk list"
#   - The script uses udisksctl (from udisks2) to power down devices. This is also Linux-specific.
#     Users on non-Linux platforms can comment it and use an alternative to power-down disks.
#
# Shell: POSIX compliant
# Author: Arun Prakash Jana

prompt="device name [e.g. sdXn] ('l'ist, 'q'uit): "

lsblk

printf "\nEnsure you aren't still in the mounted device.\n"
printf "%s" "$prompt"
read -r dev

while [ -n "$dev" ]; do
    if [ "$dev" = "l" ]; then
        lsblk
    elif [ "$dev" = "q" ]; then
        exit
    else
        # LUKS volumes mounted with udisksctl appear differently than with pmount
        if grep -qs "$dev " /proc/mounts || [ -n "$(lsblk -n "/dev/$dev" -o MOUNTPOINT)" ]; then
            sync "$(lsblk -n "/dev/$dev" -o MOUNTPOINT | sed "/^$/d")"
            if type pumount >/dev/null 2>&1; then
                pumount "/dev/$dev"
                exit_code="$?"
            else
                # Unlike pmount, udisksctl does not transparently handle LUKS volumes
                # We need to manually get the unlocked device, unmount it, and then lock the volume
                if lsblk -n "/dev/$dev" -o FSTYPE | grep "crypto_LUKS" >/dev/null; then
                    dev_map="$(udisksctl info -b /dev/"$dev" | grep "CleartextDevice" | grep -o "dm_2d[[:digit:]]*" | sed "s/_2d/-/")"
                    udisksctl unmount -b "/dev/$dev_map" --no-user-interaction >/dev/null
                    exit_code="$?"
                    udisksctl lock -b "/dev/$dev" --no-user-interaction >/dev/null
                else
                    udisksctl unmount -b "/dev/$dev" --no-user-interaction >/dev/null
                    exit_code="$?"
                fi
            fi
            if [ $exit_code -eq 0 ]; then
                echo "/dev/$dev unmounted."
                if udisksctl power-off -b "/dev/$dev" --no-user-interaction; then
                    echo "/dev/$dev ejected."
                fi
            fi
        elif [ -b "/dev/$dev" ]; then
            if type pmount >/dev/null 2>&1; then
                pmount "/dev/$dev"
                exit_code="$?"
            else
                # Unlike pmount, udisksctl does not transparently handle LUKS volumes
                # We need to manually get the unlocked device and mount that instead of the volume itself
                if [ "$(lsblk "/dev/$dev" -n -o FSTYPE)" = "crypto_LUKS" ]; then
                    dev_map=$(udisksctl unlock -b "/dev/$dev" --no-user-interaction | grep -o "dm-[[:digit:]]*")
                    udisksctl mount -b "/dev/$dev_map" --no-user-interaction >/dev/null
                    exit_code="$?"
                else
                    udisksctl mount -b "/dev/$dev" --no-user-interaction >/dev/null
                    exit_code="$?"
                fi
            fi
            if [ $exit_code -eq 0 ]; then
                sleep 1
                echo "/dev/$dev mounted to $(lsblk -n "/dev/$dev" -o MOUNTPOINT | sed "/^$/d")."
            fi
        else
            echo "/dev/$dev does not exist or is not a block device."
        fi
    fi

    echo
    printf "%s" "$prompt"
    read -r dev
done
